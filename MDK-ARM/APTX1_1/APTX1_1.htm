<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [APTX1_1\APTX1_1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image APTX1_1\APTX1_1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Mon Aug 03 17:12:32 2020
<BR><P>
<H3>Maximum Stack Usage =        456 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; monitor::serial_consume() &rArr; monitor::parse_input_uart() &rArr; Main_Menu() &rArr; xmodem_receive() &rArr; xmodem_handle_packet(unsigned char) &rArr; FLASH_If_Write(unsigned, unsigned char*, unsigned) &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[91]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[21]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[11]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC1_COMP_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3a]">ADC_DMAConvCplt</a> from stm32f0xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[3c]">ADC_DMAError</a> from stm32f0xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[3b]">ADC_DMAHalfConvCplt</a> from stm32f0xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[33]">CEC_CAN_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[20]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1a]">EXTI0_1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1b]">EXTI2_3_IRQHandler</a> from stm32f0xx_it.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1c]">EXTI4_15_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[11]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2c]">I2C1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2d]">I2C2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[10]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[16]">PVD_VDDIO2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[19]">RCC_CRS_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[f]">Reset_Handler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2f]">SPI2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[28]">TIM14_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[29]">TIM15_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2a]">TIM16_IRQHandler</a> from stm32f0xx_it.o(i.TIM16_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[2b]">TIM17_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[23]">TIM1_CC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[24]">TIM2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[25]">TIM3_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[26]">TIM6_DAC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[27]">TIM7_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[1d]">TSC_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[3d]">UART_DMAAbortOnError</a> from stm32f0xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f0xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[30]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[32]">USART3_4_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[34]">USB_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from startup_stm32f072xb.o(.text) referenced from startup_stm32f072xb.o(RESET)
 <LI><a href="#[40]">STATUS_reg::~STATUS_reg()</a> from status_reg.o(i._ZN10STATUS_regD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[3e]">DebugHelper::~DebugHelper()</a> from debug_facilities.o(i._ZN11DebugHelperD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[45]">Screen_ctrl::~Screen_ctrl()</a> from screen_controller.o(i._ZN11Screen_ctrlD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[46]">adc_controller::~adc_controller()</a> from adc_controller.o(i._ZN14adc_controllerD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[47]">main_controller::~main_controller()</a> from main_controller.o(i._ZN15main_controllerD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[43]">PeripherialDevices::~PeripherialDevices()</a> from peripherial_controller.o(i._ZN18PeripherialDevicesD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[44]">State::~State()</a> from state.o(i._ZN5StateD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[3f]">CS_reg::~CS_reg()</a> from cs_register.o(i._ZN6CS_regD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[41]">Memory::~Memory()</a> from mem.o(i._ZN6MemoryD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[48]">monitor::~monitor()</a> from monitor.o(i._ZN7monitorD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[42]">Mem_ctrl::~Mem_ctrl()</a> from mem_controller.o(i._ZN8Mem_ctrlD1Ev) referenced from main.o(i.__sti___8_main_cpp_debug)
 <LI><a href="#[4a]">__main</a> from __main.o(!!!main) referenced from startup_stm32f072xb.o(.text)
 <LI><a href="#[49]">__sti___8_main_cpp_debug</a> from main.o(i.__sti___8_main_cpp_debug) referenced from main.o(.init_array)
 <LI><a href="#[38]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[39]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[37]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[4c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4e]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1dc]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1dd]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1de]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[75]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[50]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[52]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[53]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[55]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[62]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1df]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[57]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1e0]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1e1]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[59]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1e2]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1e3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1e4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[5b]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1e5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1e6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1e7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1e8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[5c]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1e9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1ea]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1eb]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1ec]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ed]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ee]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ef]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1f1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1f3]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[67]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[5d]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1f4]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1f5]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1f6]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1f7]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1f8]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1f9]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1fa]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[4d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1fb]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[5f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[61]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1fc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[63]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; monitor::serial_consume() &rArr; monitor::parse_input_uart() &rArr; Main_Menu() &rArr; xmodem_receive() &rArr; xmodem_handle_packet(unsigned char) &rArr; FLASH_If_Write(unsigned, unsigned char*, unsigned) &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1fd]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[93]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[66]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1fe]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[68]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_version()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned, unsigned)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned)
</UL>

<P><STRONG><a name="[1ff]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[200]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[21]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CEC_CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_VDDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f072xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f072xb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6a]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::read_back_current_cs()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::Memory(unsigned char)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter(unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_version()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_receive()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections_with_printback(unsigned char)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::poll_complete(unsigned char, unsigned)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_ap_offset()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_serial(unsigned char)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read16(unsigned)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::print_status()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::binary_and_patch()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::qa_mon(bool, bool, bool)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter_remaining(unsigned, unsigned)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_remaining_in_percent(unsigned, unsigned)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_error_remaining(unsigned)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned, unsigned)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pressure(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_battery(unsigned, unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_piazo(bool)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::clean_screen(unsigned)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::blank_screen()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::print_logo()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_write()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_erase()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_blink()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_scan()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_read()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_get_man_id_check()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_find_pulses()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_test_read()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_reg::print_current()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::check_timer_expired()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::pass_to_ard(unsigned char*)
</UL>

<P><STRONG><a name="[6d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[6e]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[6c]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[51]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[54]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[201]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[76]"></a>strtoul</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_write()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_erase()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_blink()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_scan()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_read()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_status_write()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_set_serial()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_set_maxi()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_set_date()
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_atexit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[7d]"></a>_strtok_r</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, strtok_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[1a9]"></a>strtok_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, strtok_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1aa]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[80]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[7f]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::monitor(main_controller*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::Screen_ctrl()
</UL>

<P><STRONG><a name="[202]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::monitor(main_controller*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[203]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[111]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[204]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read(select_channel)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::convert_to_volt()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_remaining_in_percent(unsigned, unsigned)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(int, int)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_ap_offset()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_battery(unsigned, unsigned)
</UL>

<P><STRONG><a name="[207]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[78]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[7c]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[208]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[72]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[6b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[37]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[87]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[56]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[79]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[5e]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[7e]"></a>__strtok_internal</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, strtok_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok_r
</UL>

<P><STRONG><a name="[71]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[20a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[20b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[5a]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[20c]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[8d]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[58]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[8f]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[88]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[8b]"></a>strcspn</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, strcspn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[8a]"></a>strspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strspn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[60]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[8c]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[65]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[8e]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1db]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[20e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[94]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[69]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[96]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[97]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[211]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI2_3_IRQHandler &rArr; write_once &rArr; read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_once
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>Error_Handler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Error_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[a6]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[98]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[9a]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[99]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
</UL>

<P><STRONG><a name="[a7]"></a>HAL_ADC_Init</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[a8]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[ac]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>HAL_CRCEx_Init</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, stm32f0xx_hal_crc_ex.o(i.HAL_CRCEx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CRCEx_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[af]"></a>HAL_CRCEx_Polynomial_Set</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f0xx_hal_crc_ex.o(i.HAL_CRCEx_Polynomial_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_CRC_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f0xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRCEx_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRCEx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
</UL>

<P><STRONG><a name="[b1]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, crc.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[ab]"></a>HAL_DMA_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[ad]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, stm32f0xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[b3]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f0xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_reverse()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_with_watchdog
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps_3()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::star_wars()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondSection()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firstSection()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_receive()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char, unsigned)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::poll_complete(unsigned char, unsigned)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_date()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_max()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::binary_and_patch()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_register(unsigned char, unsigned short)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::print_register(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_serial()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write(unsigned, unsigned char*, unsigned)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::long_beep()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps_2()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::read_interlock()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_once
</UL>

<P><STRONG><a name="[b4]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_GPIO_Init</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[16d]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reset_button_aux
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::read_interlock()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::init_first_step()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_is_interlocked()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::read_interlock()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reset_button
</UL>

<P><STRONG><a name="[145]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_with_watchdog
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_ap_offset()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::init_first_step()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::read_interlock()
</UL>

<P><STRONG><a name="[a3]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs1(GPIO_PinState)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::pull_chipselet_line(GPIO_PinState)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_tight(bool)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::store_register()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_generic(GPIO_PinState, cs_decoder)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps_3()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(int, int)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_is_interlocked()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::long_beep()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::show(unsigned)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::update_state(unsigned char)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps_2()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::read_interlock()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pull_chipselet_line
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_with_watchdog
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::poll_complete(unsigned char, unsigned)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_remaining_in_percent(unsigned, unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_piazo(bool)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_find_pulses()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::read_interlock()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::check_timer_expired()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[e9]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[b5]"></a>HAL_Init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>HAL_InitTick</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stm32f0xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b7]"></a>HAL_MspInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f0xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[b8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[11c]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[c0]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[ba]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c2]"></a>HAL_RCC_MCOConfig</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_MCOConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_MCOConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[c3]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 966 bytes, Stack size 32 bytes, stm32f0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[ff]"></a>HAL_RTCEx_SetTimeStamp</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f0xx_hal_rtc_ex.o(i.HAL_RTCEx_SetTimeStamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RTCEx_SetTimeStamp
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RTC_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[cb]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_SPI_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[cd]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[ce]"></a>HAL_SPI_Receive</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::read_back_current_cs()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_reg::get_value()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read16(unsigned)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::get_id()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read_status_register2()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read_status_register1()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[d1]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::set_value(unsigned char)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs1(GPIO_PinState)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::read_back_current_cs()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_reverse()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_tight(bool)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_generic(GPIO_PinState, cs_decoder)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_a2d(GPIO_PinState)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_WRITE(stall_log_out)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read16(unsigned)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::get_id()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write(unsigned, unsigned)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::erase()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::erase(unsigned)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_status_register(unsigned short)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read_status_register2()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read_status_register1()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_disable()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_enable()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_disable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_generic
</UL>

<P><STRONG><a name="[cf]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, stm32f0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::serial_comm_to_adc(select_channel)
</UL>

<P><STRONG><a name="[df]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f0xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d5]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_UP_TRG_COM_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[e2]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC1_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[dc]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[e8]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[ea]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>HAL_UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[f3]"></a>HAL_UART_MspInit</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_UART_Receive</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_receive()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_handle_packet(unsigned char)
</UL>

<P><STRONG><a name="[10c]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[f9]"></a>HAL_UART_Transmit</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutByte(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
</UL>

<P><STRONG><a name="[10b]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[11]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>MX_ADC_Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, adc.o(i.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_DMA_Init &rArr; DMA_CalcBaseAndBitshift
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>MX_CRC_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, crc.o(i.MX_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_CRC_Init &rArr; HAL_CRC_Init &rArr; HAL_CRCEx_Init &rArr; HAL_CRCEx_Polynomial_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fc]"></a>MX_DMA_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>MX_GPIO_Init</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>MX_RTC_Init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetTimeStamp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>MX_SPI1_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>MX_TIM16_Init</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, tim.o(i.MX_TIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_TIM16_Init &rArr; HAL_TIM_OC_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>MX_TIM2_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tim.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>MX_TIM3_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tim.o(i.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[ca]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[c6]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, system_stm32f0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(.text)
</UL>
<P><STRONG><a name="[2a]"></a>TIM16_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM16_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_for_reset_press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.TIM1_BRK_UP_TRG_COM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIM1_BRK_UP_TRG_COM_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, stm32f0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d6]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e4]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[f5]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f6]"></a>UART_CheckIdleState</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f1]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>UART_Receive_IT</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f0xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>UART_SetConfig</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, stm32f0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f0]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, stm32f0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f072xb.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>firstSection()</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, peripherial_controller.o(i._Z12firstSectionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = firstSection() &rArr; beep(int, int) &rArr; tone(int, int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::star_wars()
</UL>

<P><STRONG><a name="[10f]"></a>secondSection()</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, peripherial_controller.o(i._Z13secondSectionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = secondSection() &rArr; beep(int, int) &rArr; tone(int, int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::star_wars()
</UL>

<P><STRONG><a name="[110]"></a>FLASH_If_Write(unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, flash_if.o(i._Z14FLASH_If_WritejPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FLASH_If_Write(unsigned, unsigned char*, unsigned) &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_handle_packet(unsigned char)
</UL>

<P><STRONG><a name="[113]"></a>Serial_PutByte(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, common.o(i._Z14Serial_PutByteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Serial_PutByte(unsigned char) &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_receive()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_error_handler(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[114]"></a>prepare_packet(unsigned char*, unsigned char*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, common.o(i._Z14prepare_packetPhS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prepare_packet(unsigned char*, unsigned char*) &rArr; calc_crc(unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
</UL>

<P><STRONG><a name="[1d2]"></a>remapMemToSRAM()</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, main.o(i._Z14remapMemToSRAMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = remapMemToSRAM()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>xmodem_receive()</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, xmodem.o(i._Z14xmodem_receivev))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = xmodem_receive() &rArr; xmodem_handle_packet(unsigned char) &rArr; FLASH_If_Write(unsigned, unsigned char*, unsigned) &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutByte(unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_handle_packet(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_error_handler(unsigned char*, unsigned char)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu()
</UL>

<P><STRONG><a name="[11d]"></a>xmodem_calc_crc(unsigned char*, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, xmodem.o(i._Z15xmodem_calc_crcPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xmodem_calc_crc(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_handle_packet(unsigned char)
</UL>

<P><STRONG><a name="[119]"></a>Serial_PutString(const char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common.o(i._Z16Serial_PutStringPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Serial_PutString(const char*) &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::read_back_current_cs()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_receive()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections_with_printback(unsigned char)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::poll_complete(unsigned char, unsigned)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_ap_offset()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_serial(unsigned char)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read16(unsigned)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::print_status()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::binary_and_patch()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor_pwm()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned, unsigned)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_battery(unsigned, unsigned)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::print_logo()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::fire_is_pressed()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_write()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_erase()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_blink()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_scan()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_read()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_get_man_id_check()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_start_motor()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_find_pulses()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_stop_motor()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_test_read()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_pattern()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_reg::print_current()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::check_timer_expired()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::pass_to_ard(unsigned char*)
</UL>

<P><STRONG><a name="[11a]"></a>Monitor_PutString(const char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, common.o(i._Z17Monitor_PutStringPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Monitor_PutString(const char*) &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_packet(unsigned char*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter(unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_version()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::qa_mon(bool, bool, bool)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter_remaining(unsigned, unsigned)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_remaining_in_percent(unsigned, unsigned)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_error_remaining(unsigned)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned, unsigned)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pressure(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_battery(unsigned, unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_piazo(bool)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::clean_screen(unsigned)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::blank_screen()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::check_timer_expired()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::pass_to_ard(unsigned char*)
</UL>

<P><STRONG><a name="[11b]"></a>SystemClock_Config()</STRONG> (Thumb, 144 bytes, Stack size 112 bytes, main.o(i._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_MCOConfig
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10e]"></a>beep(int, int)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, peripherial_controller.o(i._Z4beepii))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = beep(int, int) &rArr; tone(int, int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::star_wars()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondSection()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firstSection()
</UL>

<P><STRONG><a name="[11e]"></a>tone(int, int)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, peripherial_controller.o(i._Z4toneii))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tone(int, int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep(int, int)
</UL>

<P><STRONG><a name="[11f]"></a>noTone()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, peripherial_controller.o(i._Z6noTonev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = noTone()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep(int, int)
</UL>

<P><STRONG><a name="[115]"></a>calc_crc(unsigned char*, int)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, common.o(i._Z8calc_crcPhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_crc(unsigned char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_packet(unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[121]"></a>dump_mem()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, menu.o(i._Z8dump_memv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dump_mem() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu()
</UL>

<P><STRONG><a name="[122]"></a>Main_Menu()</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, menu.o(i._Z9Main_Menuv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Main_Menu() &rArr; xmodem_receive() &rArr; xmodem_handle_packet(unsigned char) &rArr; FLASH_If_Write(unsigned, unsigned char*, unsigned) &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_receive()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[123]"></a>STATUS_reg::print_current()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, status_reg.o(i._ZN10STATUS_reg13print_currentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = STATUS_reg::print_current() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_status_reg_read()
</UL>

<P><STRONG><a name="[124]"></a>STATUS_reg::get_value()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, status_reg.o(i._ZN10STATUS_reg9get_valueEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = STATUS_reg::get_value() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
</UL>

<P><STRONG><a name="[1ca]"></a>STATUS_reg::STATUS_reg()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, status_reg.o(i._ZN10STATUS_regC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[213]"></a>STATUS_reg::STATUS_reg__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, status_reg.o(i._ZN10STATUS_regC1Ev), UNUSED)

<P><STRONG><a name="[40]"></a>STATUS_reg::~STATUS_reg()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, status_reg.o(i._ZN10STATUS_regD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[214]"></a>STATUS_reg::~STATUS_reg__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, status_reg.o(i._ZN10STATUS_regD1Ev), UNUSED)

<P><STRONG><a name="[125]"></a>DebugHelper::fast_beeps()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, debug_facilities.o(i._ZN11DebugHelper10fast_beepsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugHelper::fast_beeps() &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[126]"></a>DebugHelper::fast_beeps_2()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, debug_facilities.o(i._ZN11DebugHelper12fast_beeps_2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugHelper::fast_beeps_2() &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
</UL>

<P><STRONG><a name="[127]"></a>DebugHelper::fast_beeps_3()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, debug_facilities.o(i._ZN11DebugHelper12fast_beeps_3Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugHelper::fast_beeps_3() &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>DebugHelper::update_state(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, debug_facilities.o(i._ZN11DebugHelper12update_stateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DebugHelper::update_state(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
</UL>

<P><STRONG><a name="[129]"></a>DebugHelper::show(unsigned)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, debug_facilities.o(i._ZN11DebugHelper4showEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DebugHelper::show(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_before_while()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::update(unsigned)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::update(bool, bool, bool, bool, bool)
</UL>

<P><STRONG><a name="[12a]"></a>DebugHelper::update(bool, bool, bool, bool, bool)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, debug_facilities.o(i._ZN11DebugHelper6updateEbbbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugHelper::update(bool, bool, bool, bool, bool) &rArr; DebugHelper::show(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::show(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
</UL>

<P><STRONG><a name="[12b]"></a>DebugHelper::update(unsigned)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, debug_facilities.o(i._ZN11DebugHelper6updateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DebugHelper::update(unsigned) &rArr; DebugHelper::show(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::show(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_blink()
</UL>

<P><STRONG><a name="[12c]"></a>DebugHelper::long_beep()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, debug_facilities.o(i._ZN11DebugHelper9long_beepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DebugHelper::long_beep() &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_is_interlocked()
</UL>

<P><STRONG><a name="[1c8]"></a>DebugHelper::DebugHelper()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, debug_facilities.o(i._ZN11DebugHelperC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[215]"></a>DebugHelper::DebugHelper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug_facilities.o(i._ZN11DebugHelperC1Ev), UNUSED)

<P><STRONG><a name="[3e]"></a>DebugHelper::~DebugHelper()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, debug_facilities.o(i._ZN11DebugHelperD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[216]"></a>DebugHelper::~DebugHelper__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, debug_facilities.o(i._ZN11DebugHelperD1Ev), UNUSED)

<P><STRONG><a name="[12d]"></a>Screen_ctrl::print_logo()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, screen_controller.o(i._ZN11Screen_ctrl10print_logoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::print_logo() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_before_while()
</UL>

<P><STRONG><a name="[12e]"></a>Screen_ctrl::pass_to_ard(unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, screen_controller.o(i._ZN11Screen_ctrl11pass_to_ardEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::pass_to_ard(unsigned char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_pass()
</UL>

<P><STRONG><a name="[12f]"></a>Screen_ctrl::blank_screen()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, screen_controller.o(i._ZN11Screen_ctrl12blank_screenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::blank_screen() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
</UL>

<P><STRONG><a name="[130]"></a>Screen_ctrl::clean_screen(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, screen_controller.o(i._ZN11Screen_ctrl12clean_screenEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::clean_screen(unsigned) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[131]"></a>Screen_ctrl::update_piazo(bool)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, screen_controller.o(i._ZN11Screen_ctrl12update_piazoEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::update_piazo(bool) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_adc()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[133]"></a>Screen_ctrl::update_battery(unsigned, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, screen_controller.o(i._ZN11Screen_ctrl14update_batteryEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::update_battery(unsigned, unsigned) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_adc()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[134]"></a>Screen_ctrl::update_version()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, screen_controller.o(i._ZN11Screen_ctrl14update_versionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::update_version() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_before_while()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>Screen_ctrl::update_pressure(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, screen_controller.o(i._ZN11Screen_ctrl15update_pressureEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::update_pressure(unsigned) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_adc()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[137]"></a>Screen_ctrl::check_timer_expired()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, screen_controller.o(i._ZN11Screen_ctrl19check_timer_expiredEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::check_timer_expired() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::qa_mon(bool, bool, bool)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_error_remaining(unsigned)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned, unsigned)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned)
</UL>

<P><STRONG><a name="[138]"></a>Screen_ctrl::update_pulse_counter(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, screen_controller.o(i._ZN11Screen_ctrl20update_pulse_counterEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::update_pulse_counter(unsigned) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>Screen_ctrl::tx_send_general_error(unsigned)</STRONG> (Thumb, 106 bytes, Stack size 80 bytes, screen_controller.o(i._ZN11Screen_ctrl21tx_send_general_errorEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::tx_send_general_error(unsigned) &rArr; Screen_ctrl::check_timer_expired() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::check_timer_expired()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
</UL>

<P><STRONG><a name="[13a]"></a>Screen_ctrl::tx_send_general_error(unsigned, unsigned)</STRONG> (Thumb, 158 bytes, Stack size 80 bytes, screen_controller.o(i._ZN11Screen_ctrl21tx_send_general_errorEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::tx_send_general_error(unsigned, unsigned) &rArr; Screen_ctrl::check_timer_expired() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::check_timer_expired()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
</UL>

<P><STRONG><a name="[13b]"></a>Screen_ctrl::update_error_remaining(unsigned)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, screen_controller.o(i._ZN11Screen_ctrl22update_error_remainingEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::update_error_remaining(unsigned) &rArr; Screen_ctrl::check_timer_expired() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::check_timer_expired()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
</UL>

<P><STRONG><a name="[13c]"></a>Screen_ctrl::update_remaining_in_percent(unsigned, unsigned)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, screen_controller.o(i._ZN11Screen_ctrl27update_remaining_in_percentEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::update_remaining_in_percent(unsigned, unsigned) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[13d]"></a>Screen_ctrl::update_pulse_counter_remaining(unsigned, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, screen_controller.o(i._ZN11Screen_ctrl30update_pulse_counter_remainingEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::update_pulse_counter_remaining(unsigned, unsigned) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
</UL>

<P><STRONG><a name="[13e]"></a>Screen_ctrl::qa_mon(bool, bool, bool)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, screen_controller.o(i._ZN11Screen_ctrl6qa_monEbbb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Screen_ctrl::qa_mon(bool, bool, bool) &rArr; Screen_ctrl::check_timer_expired() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Monitor_PutString(const char*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::check_timer_expired()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
</UL>

<P><STRONG><a name="[13f]"></a>Screen_ctrl::Screen_ctrl()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, screen_controller.o(i._ZN11Screen_ctrlC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Screen_ctrl::Screen_ctrl()
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[217]"></a>Screen_ctrl::Screen_ctrl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, screen_controller.o(i._ZN11Screen_ctrlC1Ev), UNUSED)

<P><STRONG><a name="[45]"></a>Screen_ctrl::~Screen_ctrl()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, screen_controller.o(i._ZN11Screen_ctrlD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[218]"></a>Screen_ctrl::~Screen_ctrl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, screen_controller.o(i._ZN11Screen_ctrlD1Ev), UNUSED)

<P><STRONG><a name="[16e]"></a>adc_controller::pressure_check()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, adc_controller.o(i._ZN14adc_controller14pressure_checkEv))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_pressure_ok()
</UL>

<P><STRONG><a name="[140]"></a>adc_controller::convert_to_volt()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adc_controller.o(i._ZN14adc_controller15convert_to_voltEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_controller::convert_to_volt()
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_adc()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[172]"></a>adc_controller::convert_to_celsius()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adc_controller.o(i._ZN14adc_controller18convert_to_celsiusEv))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
</UL>

<P><STRONG><a name="[141]"></a>adc_controller::serial_comm_to_adc(select_channel)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, adc_controller.o(i._ZN14adc_controller18serial_comm_to_adcE14select_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adc_controller::serial_comm_to_adc(select_channel) &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read(select_channel)
</UL>

<P><STRONG><a name="[142]"></a>adc_controller::read(select_channel)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, adc_controller.o(i._ZN14adc_controller4readE14select_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = adc_controller::read(select_channel) &rArr; CS_reg::cs_a2d(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_a2d(GPIO_PinState)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::serial_comm_to_adc(select_channel)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
</UL>

<P><STRONG><a name="[144]"></a>adc_controller::read()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, adc_controller.o(i._ZN14adc_controller4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = adc_controller::read() &rArr; adc_controller::read(select_channel) &rArr; CS_reg::cs_a2d(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read(select_channel)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_adc()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[1ce]"></a>adc_controller::adc_controller(CS_reg*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, adc_controller.o(i._ZN14adc_controllerC1EP6CS_reg))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[219]"></a>adc_controller::adc_controller__sub_object(CS_reg*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, adc_controller.o(i._ZN14adc_controllerC1EP6CS_reg), UNUSED)

<P><STRONG><a name="[46]"></a>adc_controller::~adc_controller()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adc_controller.o(i._ZN14adc_controllerD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[21a]"></a>adc_controller::~adc_controller__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, adc_controller.o(i._ZN14adc_controllerD1Ev), UNUSED)

<P><STRONG><a name="[146]"></a>main_controller::idle_state()</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, main_controller.o(i._ZN15main_controller10idle_stateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main_controller::idle_state() &rArr; main_controller::added_counter() &rArr; PeripherialDevices::read() &rArr; STATUS_reg::get_value() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_for_reset_press_aux
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::convert_to_volt()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor_pwm()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::clear_counter()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_remaining_in_percent(unsigned, unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pressure(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_battery(unsigned, unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_piazo(bool)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::clean_screen(unsigned)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_all()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::set_b_motor_running(bool)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::fire_is_pressed()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[151]"></a>main_controller::init_state()</STRONG> (Thumb, 634 bytes, Stack size 64 bytes, main_controller.o(i._ZN15main_controller10init_stateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = main_controller::init_state() &rArr; Mem_ctrl::binary_and_patch() &rArr; Mem_ctrl::get_ap_offset() &rArr; Mem_ctrl::read_skip_problems(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_with_watchdog
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_date()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_max()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::binary_and_patch()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_register(unsigned char, unsigned short)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::print_register(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_serial()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter_remaining(unsigned, unsigned)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_error_remaining(unsigned)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned, unsigned)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::blank_screen()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::generate_error_code()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_un32_pulses()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_un32_cursor()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_mcu_valid()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_apt_valid()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_apt_pulses()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_am_valid()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>main_controller::active_state()</STRONG> (Thumb, 386 bytes, Stack size 24 bytes, main_controller.o(i._ZN15main_controller12active_stateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = main_controller::active_state() &rArr; main_controller::write_out_pulses_on_stop_motor() &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_with_watchdog
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter(unsigned)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor_pwm()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_error_remaining(unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pressure(unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_piazo(bool)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::set_b_motor_running(bool)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_is_interlocked()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::fire_is_pressed()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14f]"></a>main_controller::update_debug()</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, main_controller.o(i._ZN15main_controller12update_debugEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = main_controller::update_debug() &rArr; DebugHelper::update(bool, bool, bool, bool, bool) &rArr; DebugHelper::show(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_all()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_current_state()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_pressure_ok()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_mcu_valid()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_apt_valid()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_am_valid()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::update(bool, bool, bool, bool, bool)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::update_state(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[169]"></a>main_controller::update_state()</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, main_controller.o(i._ZN15main_controller12update_stateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main_controller::update_state() &rArr; Mem_ctrl::check_connections() &rArr; Mem_ctrl::check_connections(unsigned char) &rArr; Memory::check_id() &rArr; Memory::get_id() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::convert_to_volt()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter(unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_version()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_remaining_in_percent(unsigned, unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pressure(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_battery(unsigned, unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_piazo(bool)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_all()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>main_controller::added_counter()</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, main_controller.o(i._ZN15main_controller13added_counterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = main_controller::added_counter() &rArr; PeripherialDevices::read() &rArr; STATUS_reg::get_value() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_opto_counter()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[155]"></a>main_controller::is_b_am_valid()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_controller.o(i._ZN15main_controller13is_b_am_validEv))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::generate_error_code()
</UL>

<P><STRONG><a name="[15a]"></a>main_controller::get_apt_pulses()</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, main_controller.o(i._ZN15main_controller14get_apt_pulsesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main_controller::get_apt_pulses() &rArr; Mem_ctrl::read(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
</UL>

<P><STRONG><a name="[16b]"></a>main_controller::init_PF_struct(PF_memory*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main_controller.o(i._ZN15main_controller14init_PF_structEP9PF_memory))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = main_controller::init_PF_struct(PF_memory*)
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_un32_pulses()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_un32_cursor()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>main_controller::is_b_apt_valid()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_controller.o(i._ZN15main_controller14is_b_apt_validEv))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::generate_error_code()
</UL>

<P><STRONG><a name="[162]"></a>main_controller::is_b_mcu_valid()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_controller.o(i._ZN15main_controller14is_b_mcu_validEv))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::generate_error_code()
</UL>

<P><STRONG><a name="[16c]"></a>main_controller::read_interlock()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i._ZN15main_controller14read_interlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = main_controller::read_interlock()
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>main_controller::fire_is_pressed()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, main_controller.o(i._ZN15main_controller15fire_is_pressedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = main_controller::fire_is_pressed() &rArr; PeripherialDevices::read() &rArr; STATUS_reg::get_value() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_is_interlocked()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[15d]"></a>main_controller::get_un32_cursor()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main_controller.o(i._ZN15main_controller15get_un32_cursorEv))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_PF_struct(PF_memory*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
</UL>

<P><STRONG><a name="[15b]"></a>main_controller::get_un32_pulses()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main_controller.o(i._ZN15main_controller15get_un32_pulsesEv))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_PF_struct(PF_memory*)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
</UL>

<P><STRONG><a name="[167]"></a>main_controller::is_b_pressure_ok()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main_controller.o(i._ZN15main_controller16is_b_pressure_okEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = main_controller::is_b_pressure_ok()
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::pressure_check()
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_all()
</UL>

<P><STRONG><a name="[168]"></a>main_controller::get_current_state()</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, main_controller.o(i._ZN15main_controller17get_current_stateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = main_controller::get_current_state()
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_all()
</UL>

<P><STRONG><a name="[16f]"></a>main_controller::init_before_while()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, main_controller.o(i._ZN15main_controller17init_before_whileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = main_controller::init_before_while() &rArr; Screen_ctrl::update_version() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_version()
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::init_first_step()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::print_logo()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::show(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15c]"></a>main_controller::generate_error_code()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main_controller.o(i._ZN15main_controller19generate_error_codeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = main_controller::generate_error_code()
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_mcu_valid()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_apt_valid()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_am_valid()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
</UL>

<P><STRONG><a name="[166]"></a>main_controller::is_b_is_interlocked()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, main_controller.o(i._ZN15main_controller19is_b_is_interlockedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = main_controller::is_b_is_interlocked() &rArr; PeripherialDevices::stop_motor() &rArr; CS_reg::motor_cmd_tight(bool) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::long_beep()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_static()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::fire_is_pressed()
</UL>

<P><STRONG><a name="[14d]"></a>main_controller::set_b_motor_running(bool)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main_controller.o(i._ZN15main_controller19set_b_motor_runningEb))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_start_motor()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_stop_motor()
</UL>

<P><STRONG><a name="[16a]"></a>main_controller::update_opto_counter()</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main_controller.o(i._ZN15main_controller19update_opto_counterEv))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
</UL>

<P><STRONG><a name="[14a]"></a>main_controller::need_to_stall_static()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, main_controller.o(i._ZN15main_controller20need_to_stall_staticEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main_controller::need_to_stall_static() &rArr; adc_controller::read(select_channel) &rArr; CS_reg::cs_a2d(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read(select_channel)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::pressure_check()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_error_remaining(unsigned)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_is_interlocked()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_am_valid()
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[164]"></a>main_controller::need_to_stall_dynamic()</STRONG> (Thumb, 604 bytes, Stack size 32 bytes, main_controller.o(i._ZN15main_controller21need_to_stall_dynamicEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = main_controller::need_to_stall_dynamic() &rArr; Mem_ctrl::LOG_DEBUG(unsigned, unsigned, unsigned, unsigned) &rArr; Mem_ctrl::LOG_WRITE(stall_log_out) &rArr; Mem_ctrl::read(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read(select_channel)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::convert_to_celsius()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::pressure_check()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_DEBUG(unsigned, unsigned, unsigned, unsigned)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections(unsigned char)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_opto_counter()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_is_interlocked()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_am_valid()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
</UL>

<P><STRONG><a name="[165]"></a>main_controller::write_out_pulses_on_stop_motor()</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, main_controller.o(i._ZN15main_controller30write_out_pulses_on_stop_motorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = main_controller::write_out_pulses_on_stop_motor() &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::tx_send_general_error(unsigned, unsigned)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_is_interlocked()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::generate_error_code()
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_un32_pulses()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_un32_cursor()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
</UL>

<P><STRONG><a name="[14e]"></a>main_controller::get_all()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, main_controller.o(i._ZN15main_controller7get_allEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = main_controller::get_all() &rArr; main_controller::is_b_pressure_ok()
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_current_state()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_pressure_ok()
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[174]"></a>main_controller::qa_state()</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, main_controller.o(i._ZN15main_controller8qa_stateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main_controller::qa_state() &rArr; Mem_ctrl::check_connections() &rArr; Mem_ctrl::check_connections(unsigned char) &rArr; Memory::check_id() &rArr; Memory::get_id() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::convert_to_volt()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter(unsigned)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::toggle_motor()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read_counter()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::qa_mon(bool, bool, bool)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_remaining_in_percent(unsigned, unsigned)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pressure(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_battery(unsigned, unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_piazo(bool)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_un32_pulses()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_mcu_valid()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_apt_valid()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_am_valid()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>main_controller::main_controller(DebugHelper*, Mem_ctrl*, PeripherialDevices*, State*, Screen_ctrl*, adc_controller*)</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main_controller.o(i._ZN15main_controllerC1EP11DebugHelperP8Mem_ctrlP18PeripherialDevicesP5StateP11Screen_ctrlP14adc_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = main_controller::main_controller(DebugHelper*, Mem_ctrl*, PeripherialDevices*, State*, Screen_ctrl*, adc_controller*)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[21b]"></a>main_controller::main_controller__sub_object(DebugHelper*, Mem_ctrl*, PeripherialDevices*, State*, Screen_ctrl*, adc_controller*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main_controller.o(i._ZN15main_controllerC1EP11DebugHelperP8Mem_ctrlP18PeripherialDevicesP5StateP11Screen_ctrlP14adc_controller), UNUSED)

<P><STRONG><a name="[47]"></a>main_controller::~main_controller()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main_controller.o(i._ZN15main_controllerD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[21c]"></a>main_controller::~main_controller__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, main_controller.o(i._ZN15main_controllerD1Ev), UNUSED)

<P><STRONG><a name="[152]"></a>PeripherialDevices::stop_motor()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peripherial_controller.o(i._ZN18PeripherialDevices10stop_motorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PeripherialDevices::stop_motor() &rArr; CS_reg::motor_cmd_tight(bool) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_tight(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::toggle_motor()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::is_b_is_interlocked()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_stop_motor()
</UL>

<P><STRONG><a name="[178]"></a>PeripherialDevices::start_motor()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, peripherial_controller.o(i._ZN18PeripherialDevices11start_motorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PeripherialDevices::start_motor() &rArr; PeripherialDevices::clear_counter() &rArr; CS_reg::cs_clear_opto_counter(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_tight(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::clear_counter()
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::toggle_motor()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_go_active()
</UL>

<P><STRONG><a name="[176]"></a>PeripherialDevices::read_counter()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, peripherial_controller.o(i._ZN18PeripherialDevices12read_counterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PeripherialDevices::read_counter() &rArr; PeripherialDevices::read() &rArr; STATUS_reg::get_value() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
</UL>

<P><STRONG><a name="[175]"></a>PeripherialDevices::toggle_motor()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peripherial_controller.o(i._ZN18PeripherialDevices12toggle_motorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PeripherialDevices::toggle_motor() &rArr; PeripherialDevices::start_motor() &rArr; PeripherialDevices::clear_counter() &rArr; CS_reg::cs_clear_opto_counter(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor()
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
</UL>

<P><STRONG><a name="[150]"></a>PeripherialDevices::clear_counter()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peripherial_controller.o(i._ZN18PeripherialDevices13clear_counterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PeripherialDevices::clear_counter() &rArr; CS_reg::cs_clear_opto_counter(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_clear_opto_counter(GPIO_PinState)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor()
</UL>

<P><STRONG><a name="[17a]"></a>PeripherialDevices::reverse_motor()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, peripherial_controller.o(i._ZN18PeripherialDevices13reverse_motorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PeripherialDevices::reverse_motor() &rArr; CS_reg::motor_cmd_reverse() &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_reverse()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_reverse_motor()
</UL>

<P><STRONG><a name="[14c]"></a>PeripherialDevices::start_motor_pwm()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, peripherial_controller.o(i._ZN18PeripherialDevices15start_motor_pwmEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = PeripherialDevices::start_motor_pwm() &rArr; CS_reg::motor_cmd_tight(bool) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_tight(bool)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_start_motor()
</UL>

<P><STRONG><a name="[148]"></a>PeripherialDevices::read()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, peripherial_controller.o(i._ZN18PeripherialDevices4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = PeripherialDevices::read() &rArr; STATUS_reg::get_value() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_status(GPIO_PinState)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_reg::get_value()
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read_counter()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::fire_is_pressed()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_status_reg_read()
</UL>

<P><STRONG><a name="[17d]"></a>PeripherialDevices::star_wars()</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, peripherial_controller.o(i._ZN18PeripherialDevices9star_warsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PeripherialDevices::star_wars() &rArr; firstSection() &rArr; beep(int, int) &rArr; tone(int, int) &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep(int, int)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secondSection()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firstSection()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1cc]"></a>PeripherialDevices::PeripherialDevices(CS_reg*, STATUS_reg*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peripherial_controller.o(i._ZN18PeripherialDevicesC1EP6CS_regP10STATUS_reg))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[21d]"></a>PeripherialDevices::PeripherialDevices__sub_object(CS_reg*, STATUS_reg*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, peripherial_controller.o(i._ZN18PeripherialDevicesC1EP6CS_regP10STATUS_reg), UNUSED)

<P><STRONG><a name="[43]"></a>PeripherialDevices::~PeripherialDevices()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, peripherial_controller.o(i._ZN18PeripherialDevicesD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[21e]"></a>PeripherialDevices::~PeripherialDevices__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, peripherial_controller.o(i._ZN18PeripherialDevicesD1Ev), UNUSED)

<P><STRONG><a name="[17e]"></a>State::read_interlock()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, state.o(i._ZN5State14read_interlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = State::read_interlock() &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::init_first_step()
</UL>

<P><STRONG><a name="[170]"></a>State::init_first_step()</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, state.o(i._ZN5State15init_first_stepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = State::init_first_step() &rArr; State::read_interlock() &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::read_interlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_before_while()
</UL>

<P><STRONG><a name="[1cd]"></a>State::State()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, state.o(i._ZN5StateC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[21f]"></a>State::State__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, state.o(i._ZN5StateC1Ev), UNUSED)

<P><STRONG><a name="[44]"></a>State::~State()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, state.o(i._ZN5StateD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[220]"></a>State::~State__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, state.o(i._ZN5StateD1Ev), UNUSED)

<P><STRONG><a name="[17f]"></a>CS_reg::cs_generic(GPIO_PinState, cs_decoder)</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, cs_register.o(i._ZN6CS_reg10cs_genericE13GPIO_PinState10cs_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::pull_chipselet_line(GPIO_PinState)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::store_register()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_status(GPIO_PinState)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs3(GPIO_PinState)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs2(GPIO_PinState)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_clear_opto_counter(GPIO_PinState)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_a2d(GPIO_PinState)
</UL>

<P><STRONG><a name="[181]"></a>CS_reg::store_register()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cs_register.o(i._ZN6CS_reg14store_registerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CS_reg::store_register()
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::set_value(unsigned char)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_generic(GPIO_PinState, cs_decoder)
</UL>

<P><STRONG><a name="[177]"></a>CS_reg::motor_cmd_tight(bool)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, cs_register.o(i._ZN6CS_reg15motor_cmd_tightEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CS_reg::motor_cmd_tight(bool) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::pull_chipselet_line(GPIO_PinState)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor_pwm()
</UL>

<P><STRONG><a name="[17b]"></a>CS_reg::motor_cmd_reverse()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cs_register.o(i._ZN6CS_reg17motor_cmd_reverseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CS_reg::motor_cmd_reverse() &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::pull_chipselet_line(GPIO_PinState)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::reverse_motor()
</UL>

<P><STRONG><a name="[180]"></a>CS_reg::pull_chipselet_line(GPIO_PinState)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cs_register.o(i._ZN6CS_reg19pull_chipselet_lineE13GPIO_PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CS_reg::pull_chipselet_line(GPIO_PinState)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::set_value(unsigned char)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs1(GPIO_PinState)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::read_back_current_cs()
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_reverse()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_tight(bool)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_generic(GPIO_PinState, cs_decoder)
</UL>

<P><STRONG><a name="[182]"></a>CS_reg::read_back_current_cs()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cs_register.o(i._ZN6CS_reg20read_back_current_csEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = CS_reg::read_back_current_cs() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::set_value(unsigned char)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::pull_chipselet_line(GPIO_PinState)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read_back_current_cs()
</UL>

<P><STRONG><a name="[179]"></a>CS_reg::cs_clear_opto_counter(GPIO_PinState)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs_register.o(i._ZN6CS_reg21cs_clear_opto_counterE13GPIO_PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CS_reg::cs_clear_opto_counter(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_generic(GPIO_PinState, cs_decoder)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::clear_counter()
</UL>

<P><STRONG><a name="[184]"></a>CS_reg::cs1(GPIO_PinState)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, cs_register.o(i._ZN6CS_reg3cs1E13GPIO_PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CS_reg::cs1(GPIO_PinState) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::pull_chipselet_line(GPIO_PinState)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
</UL>

<P><STRONG><a name="[185]"></a>CS_reg::cs2(GPIO_PinState)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs_register.o(i._ZN6CS_reg3cs2E13GPIO_PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CS_reg::cs2(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_generic(GPIO_PinState, cs_decoder)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
</UL>

<P><STRONG><a name="[186]"></a>CS_reg::cs3(GPIO_PinState)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs_register.o(i._ZN6CS_reg3cs3E13GPIO_PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CS_reg::cs3(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_generic(GPIO_PinState, cs_decoder)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
</UL>

<P><STRONG><a name="[143]"></a>CS_reg::cs_a2d(GPIO_PinState)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cs_register.o(i._ZN6CS_reg6cs_a2dE13GPIO_PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CS_reg::cs_a2d(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_generic(GPIO_PinState, cs_decoder)
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read(select_channel)
</UL>

<P><STRONG><a name="[17c]"></a>CS_reg::cs_status(GPIO_PinState)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cs_register.o(i._ZN6CS_reg9cs_statusE13GPIO_PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CS_reg::cs_status(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs_generic(GPIO_PinState, cs_decoder)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
</UL>

<P><STRONG><a name="[183]"></a>CS_reg::set_value(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cs_register.o(i._ZN6CS_reg9set_valueEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CS_reg::set_value(unsigned char) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::pull_chipselet_line(GPIO_PinState)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::store_register()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::read_back_current_cs()
</UL>

<P><STRONG><a name="[1c9]"></a>CS_reg::CS_reg()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cs_register.o(i._ZN6CS_regC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[221]"></a>CS_reg::CS_reg__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cs_register.o(i._ZN6CS_regC1Ev), UNUSED)

<P><STRONG><a name="[3f]"></a>CS_reg::~CS_reg()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cs_register.o(i._ZN6CS_regD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[222]"></a>CS_reg::~CS_reg__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cs_register.o(i._ZN6CS_regD1Ev), UNUSED)

<P><STRONG><a name="[187]"></a>Memory::print_status()</STRONG> (Thumb, 124 bytes, Stack size 80 bytes, mem.o(i._ZN6Memory12print_statusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::print_register(unsigned char)
</UL>

<P><STRONG><a name="[188]"></a>Memory::write_enable()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mem.o(i._ZN6Memory12write_enableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Memory::write_enable() &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_WRITE(stall_log_out)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char, unsigned)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_register(unsigned char, unsigned short)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char)
</UL>

<P><STRONG><a name="[189]"></a>Memory::write_disable()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mem.o(i._ZN6Memory13write_disableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Memory::write_disable() &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[18a]"></a>Memory::read_status_register1()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mem.o(i._ZN6Memory21read_status_register1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Memory::read_status_register1() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::poll_complete(unsigned char, unsigned)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::print_register(unsigned char)
</UL>

<P><STRONG><a name="[18b]"></a>Memory::read_status_register2()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mem.o(i._ZN6Memory21read_status_register2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Memory::read_status_register2() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::print_register(unsigned char)
</UL>

<P><STRONG><a name="[18c]"></a>Memory::write_status_register(unsigned short)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mem.o(i._ZN6Memory21write_status_registerEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Memory::write_status_register(unsigned short) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_register(unsigned char, unsigned short)
</UL>

<P><STRONG><a name="[18d]"></a>Memory::read(unsigned)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, mem.o(i._ZN6Memory4readEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_address
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_address_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read_once(unsigned char, unsigned)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_date(unsigned char)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_max(unsigned char)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_serial(unsigned char)
</UL>

<P><STRONG><a name="[190]"></a>Memory::erase(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mem.o(i._ZN6Memory5eraseEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Memory::erase(unsigned) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[191]"></a>Memory::erase()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mem.o(i._ZN6Memory5eraseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Memory::erase() &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char)
</UL>

<P><STRONG><a name="[192]"></a>Memory::write(unsigned, unsigned)</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, mem.o(i._ZN6Memory5writeEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Memory::write(unsigned, unsigned) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_arr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[194]"></a>Memory::get_id()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mem.o(i._ZN6Memory6get_idEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Memory::get_id() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::check_id()
</UL>

<P><STRONG><a name="[195]"></a>Memory::read16(unsigned)</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, mem.o(i._ZN6Memory6read16Ej))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Memory::read16(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_arr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read256(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[196]"></a>Memory::check_id()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mem.o(i._ZN6Memory8check_idEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Memory::check_id() &rArr; Memory::get_id() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::get_id()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections_with_printback(unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections(unsigned char)
</UL>

<P><STRONG><a name="[197]"></a>Memory::Memory(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mem.o(i._ZN6MemoryC1Eh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Memory::Memory(unsigned char) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[223]"></a>Memory::Memory__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mem.o(i._ZN6MemoryC1Eh), UNUSED)

<P><STRONG><a name="[41]"></a>Memory::~Memory()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mem.o(i._ZN6MemoryD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[224]"></a>Memory::~Memory__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mem.o(i._ZN6MemoryD1Ev), UNUSED)

<P><STRONG><a name="[198]"></a>monitor::rx_pattern()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, monitor.o(i._ZN7monitor10rx_patternEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = monitor::rx_pattern() &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_register(unsigned char, unsigned short)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[199]"></a>monitor::rx_set_date()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, monitor.o(i._ZN7monitor11rx_set_dateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = monitor::rx_set_date() &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[19a]"></a>monitor::rx_set_maxi()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, monitor.o(i._ZN7monitor11rx_set_maxiEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = monitor::rx_set_maxi() &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[19b]"></a>monitor::rx_go_active()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor12rx_go_activeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = monitor::rx_go_active() &rArr; PeripherialDevices::start_motor() &rArr; PeripherialDevices::clear_counter() &rArr; CS_reg::cs_clear_opto_counter(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[19c]"></a>monitor::rx_read_back()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor12rx_read_backEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = monitor::rx_read_back() &rArr; Mem_ctrl::read_back_current_cs() &rArr; CS_reg::read_back_current_cs() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read_back_current_cs()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[19e]"></a>monitor::rx_test_read()</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, monitor.o(i._ZN7monitor12rx_test_readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = monitor::rx_test_read() &rArr; Mem_ctrl::read(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_arr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[19f]"></a>monitor::rx_get_man_id()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor13rx_get_man_idEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = monitor::rx_get_man_id() &rArr; Mem_ctrl::check_connections_with_printback(unsigned char) &rArr; Memory::check_id() &rArr; Memory::get_id() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections_with_printback(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1a1]"></a>monitor::rx_set_serial()</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, monitor.o(i._ZN7monitor13rx_set_serialEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = monitor::rx_set_serial() &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1a2]"></a>monitor::rx_stop_motor()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor13rx_stop_motorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = monitor::rx_stop_motor() &rArr; PeripherialDevices::stop_motor() &rArr; CS_reg::motor_cmd_tight(bool) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::set_b_motor_running(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1a3]"></a>monitor::rx_find_pulses()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, monitor.o(i._ZN7monitor14rx_find_pulsesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = monitor::rx_find_pulses() &rArr; Mem_ctrl::binary_and_patch() &rArr; Mem_ctrl::get_ap_offset() &rArr; Mem_ctrl::read_skip_problems(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::binary_and_patch()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1a4]"></a>monitor::rx_start_motor()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor14rx_start_motorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = monitor::rx_start_motor() &rArr; PeripherialDevices::start_motor_pwm() &rArr; CS_reg::motor_cmd_tight(bool) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor_pwm()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::set_b_motor_running(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1a5]"></a>monitor::rx_status_read()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor14rx_status_readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = monitor::rx_status_read() &rArr; Mem_ctrl::print_register(unsigned char) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::print_register(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1a6]"></a>monitor::serial_consume()</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, monitor.o(i._ZN7monitor14serial_consumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = monitor::serial_consume() &rArr; monitor::parse_input_uart() &rArr; Main_Menu() &rArr; xmodem_receive() &rArr; xmodem_handle_packet(unsigned char) &rArr; FLASH_If_Write(unsigned, unsigned char*, unsigned) &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_for_reset_press_aux
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter(unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor_pwm()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::clear_counter()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::set_b_motor_running(bool)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::long_beep()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps_2()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a8]"></a>monitor::rx_status_write()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, monitor.o(i._ZN7monitor15rx_status_writeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = monitor::rx_status_write() &rArr; Mem_ctrl::write_register(unsigned char, unsigned short) &rArr; Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState) &rArr; CS_reg::cs3(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_register(unsigned char, unsigned short)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1a7]"></a>monitor::parse_input_uart()</STRONG> (Thumb, 1532 bytes, Stack size 32 bytes, monitor.o(i._ZN7monitor16parse_input_uartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = monitor::parse_input_uart() &rArr; Main_Menu() &rArr; xmodem_receive() &rArr; xmodem_handle_packet(unsigned char) &rArr; FLASH_If_Write(unsigned, unsigned char*, unsigned) &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_adc()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::star_wars()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Menu()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_WRITE(stall_log_out)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_write()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_erase()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_debug()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_blink()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_scan()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_scan(unsigned char, unsigned)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_read()
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_pass()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_nuke()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_exit()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_get_man_id_check()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_status_reg_read()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_reverse_motor()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_status_write()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_status_read()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_start_motor()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_find_pulses()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_stop_motor()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_set_serial()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_get_man_id()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_test_read()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_read_back()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_go_active()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_set_maxi()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_set_date()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_pattern()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>monitor::rx_reverse_motor()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor16rx_reverse_motorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = monitor::rx_reverse_motor() &rArr; PeripherialDevices::reverse_motor() &rArr; CS_reg::motor_cmd_reverse() &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::reverse_motor()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1b6]"></a>monitor::rx_status_reg_read()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor18rx_status_reg_readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = monitor::rx_status_reg_read() &rArr; PeripherialDevices::read() &rArr; STATUS_reg::get_value() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_reg::print_current()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1b2]"></a>monitor::rx_get_man_id_check()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, monitor.o(i._ZN7monitor19rx_get_man_id_checkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = monitor::rx_get_man_id_check() &rArr; Mem_ctrl::check_connections(unsigned char) &rArr; Memory::check_id() &rArr; Memory::get_id() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections(unsigned char)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1b5]"></a>monitor::rx_adc()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor6rx_adcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = monitor::rx_adc() &rArr; adc_controller::read() &rArr; adc_controller::read(select_channel) &rArr; CS_reg::cs_a2d(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::convert_to_volt()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pressure(unsigned)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_battery(unsigned, unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_piazo(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>monitor::rx_exit()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, monitor.o(i._ZN7monitor7rx_exitEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1af]"></a>monitor::rx_nuke()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor7rx_nukeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = monitor::rx_nuke() &rArr; Mem_ctrl::erase(unsigned char) &rArr; Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState) &rArr; CS_reg::cs3(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1b7]"></a>monitor::rx_pass()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor7rx_passEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = monitor::rx_pass() &rArr; Screen_ctrl::pass_to_ard(unsigned char*) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::pass_to_ard(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1ad]"></a>monitor::rx_read()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, monitor.o(i._ZN7monitor7rx_readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = monitor::rx_read() &rArr; Mem_ctrl::read(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1b1]"></a>monitor::rx_scan(unsigned char, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitor7rx_scanEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = monitor::rx_scan(unsigned char, unsigned) &rArr; Mem_ctrl::read256(unsigned char, unsigned) &rArr; Memory::read16(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read256(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1b0]"></a>monitor::rx_scan()</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, monitor.o(i._ZN7monitor7rx_scanEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = monitor::rx_scan() &rArr; Mem_ctrl::read256(unsigned char, unsigned) &rArr; Memory::read16(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read256(unsigned char, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1b8]"></a>monitor::rx_blink()</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, monitor.o(i._ZN7monitor8rx_blinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = monitor::rx_blink() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::update(unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1b3]"></a>monitor::rx_debug()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, monitor.o(i._ZN7monitor8rx_debugEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1ae]"></a>monitor::rx_erase()</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, monitor.o(i._ZN7monitor8rx_eraseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = monitor::rx_erase() &rArr; Mem_ctrl::erase(unsigned char, unsigned) &rArr; Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState) &rArr; CS_reg::cs3(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1ac]"></a>monitor::rx_write()</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, monitor.o(i._ZN7monitor8rx_writeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = monitor::rx_write() &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
</UL>

<P><STRONG><a name="[1be]"></a>monitor::monitor(main_controller*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitorC1EP15main_controller))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = monitor::monitor(main_controller*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[225]"></a>monitor::monitor__sub_object(main_controller*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, monitor.o(i._ZN7monitorC1EP15main_controller), UNUSED)

<P><STRONG><a name="[48]"></a>monitor::~monitor()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, monitor.o(i._ZN7monitorD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[226]"></a>monitor::~monitor__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, monitor.o(i._ZN7monitorD1Ev), UNUSED)

<P><STRONG><a name="[1bf]"></a>Mem_ctrl::get_serial(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mem_controller.o(i._ZN8Mem_ctrl10get_serialEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::get_serial(unsigned char) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_serial()
</UL>

<P><STRONG><a name="[156]"></a>Mem_ctrl::get_serial()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mem_controller.o(i._ZN8Mem_ctrl10get_serialEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::get_serial() &rArr; Mem_ctrl::get_serial(unsigned char) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_serial(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
</UL>

<P><STRONG><a name="[1c1]"></a>Mem_ctrl::write_once(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, mem_controller.o(i._ZN8Mem_ctrl10write_onceEhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::poll_complete(unsigned char, unsigned)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write(unsigned, unsigned)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_disable()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_enable()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::print_status()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1c3]"></a>Mem_ctrl::get_ap_offset()</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, mem_controller.o(i._ZN8Mem_ctrl13get_ap_offsetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::get_ap_offset() &rArr; Mem_ctrl::read_skip_problems(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read_skip_problems(unsigned char, unsigned)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::binary_and_patch()
</UL>

<P><STRONG><a name="[1c2]"></a>Mem_ctrl::poll_complete(unsigned char, unsigned)</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, mem_controller.o(i._ZN8Mem_ctrl13poll_completeEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::poll_complete(unsigned char, unsigned) &rArr; Memory::read_status_register1() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read_status_register1()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[15f]"></a>Mem_ctrl::print_register(unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mem_controller.o(i._ZN8Mem_ctrl14print_registerEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::print_register(unsigned char) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read_status_register2()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read_status_register1()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::print_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_status_read()
</UL>

<P><STRONG><a name="[160]"></a>Mem_ctrl::write_register(unsigned char, unsigned short)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mem_controller.o(i._ZN8Mem_ctrl14write_registerEht))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Mem_ctrl::write_register(unsigned char, unsigned short) &rArr; Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState) &rArr; CS_reg::cs3(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_status_register(unsigned short)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_enable()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_status_write()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_pattern()
</UL>

<P><STRONG><a name="[159]"></a>Mem_ctrl::binary_and_patch()</STRONG> (Thumb, 608 bytes, Stack size 48 bytes, mem_controller.o(i._ZN8Mem_ctrl16binary_and_patchEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::binary_and_patch() &rArr; Mem_ctrl::get_ap_offset() &rArr; Mem_ctrl::read_skip_problems(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_ap_offset()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write(unsigned char, unsigned, unsigned)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_find_pulses()
</UL>

<P><STRONG><a name="[1c0]"></a>Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mem_controller.o(i._ZN8Mem_ctrl16chip_select_pullEh13GPIO_PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState) &rArr; CS_reg::cs3(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs3(GPIO_PinState)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs2(GPIO_PinState)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::cs1(GPIO_PinState)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read_once(unsigned char, unsigned)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_WRITE(stall_log_out)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_date(unsigned char)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read256(unsigned char, unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_max(unsigned char)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char, unsigned)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections_with_printback(unsigned char)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::poll_complete(unsigned char, unsigned)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_serial(unsigned char)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections(unsigned char)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_register(unsigned char, unsigned short)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::print_register(unsigned char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::erase(unsigned char)
</UL>

<P><STRONG><a name="[171]"></a>Mem_ctrl::check_connections(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mem_controller.o(i._ZN8Mem_ctrl17check_connectionsEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Mem_ctrl::check_connections(unsigned char) &rArr; Memory::check_id() &rArr; Memory::get_id() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::check_id()
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_get_man_id_check()
</UL>

<P><STRONG><a name="[153]"></a>Mem_ctrl::check_connections()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mem_controller.o(i._ZN8Mem_ctrl17check_connectionsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Mem_ctrl::check_connections() &rArr; Mem_ctrl::check_connections(unsigned char) &rArr; Memory::check_id() &rArr; Memory::get_id() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
</UL>

<P><STRONG><a name="[1c4]"></a>Mem_ctrl::read_skip_problems(unsigned char, unsigned)</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, mem_controller.o(i._ZN8Mem_ctrl18read_skip_problemsEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Mem_ctrl::read_skip_problems(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read_once(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_ap_offset()
</UL>

<P><STRONG><a name="[19d]"></a>Mem_ctrl::read_back_current_cs()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mem_controller.o(i._ZN8Mem_ctrl20read_back_current_csEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::read_back_current_cs() &rArr; CS_reg::read_back_current_cs() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::read_back_current_cs()
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_read_back()
</UL>

<P><STRONG><a name="[1a0]"></a>Mem_ctrl::check_connections_with_printback(unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, mem_controller.o(i._ZN8Mem_ctrl32check_connections_with_printbackEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::check_connections_with_printback(unsigned char) &rArr; Memory::check_id() &rArr; Memory::get_id() &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::check_id()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_get_man_id()
</UL>

<P><STRONG><a name="[15e]"></a>Mem_ctrl::read(unsigned char, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mem_controller.o(i._ZN8Mem_ctrl4readEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Mem_ctrl::read(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read_once(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_WRITE(stall_log_out)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::binary_and_patch()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::get_apt_pulses()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_write()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_read()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_test_read()
</UL>

<P><STRONG><a name="[1bb]"></a>Mem_ctrl::erase(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mem_controller.o(i._ZN8Mem_ctrl5eraseEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Mem_ctrl::erase(unsigned char) &rArr; Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState) &rArr; CS_reg::cs3(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::erase()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_enable()
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::binary_and_patch()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_nuke()
</UL>

<P><STRONG><a name="[1bd]"></a>Mem_ctrl::erase(unsigned char, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, mem_controller.o(i._ZN8Mem_ctrl5eraseEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Mem_ctrl::erase(unsigned char, unsigned) &rArr; Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState) &rArr; CS_reg::cs3(GPIO_PinState) &rArr; CS_reg::cs_generic(GPIO_PinState, cs_decoder) &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::erase(unsigned)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_enable()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_erase()
</UL>

<P><STRONG><a name="[112]"></a>Mem_ctrl::write(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, mem_controller.o(i._ZN8Mem_ctrl5writeEhjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::write_once(unsigned char, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_receive()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::binary_and_patch()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write(unsigned, unsigned char*, unsigned)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_write()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_set_serial()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_set_maxi()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_set_date()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_pattern()
</UL>

<P><STRONG><a name="[1c6]"></a>Mem_ctrl::get_max(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mem_controller.o(i._ZN8Mem_ctrl7get_maxEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Mem_ctrl::get_max(unsigned char) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_max()
</UL>

<P><STRONG><a name="[157]"></a>Mem_ctrl::get_max()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mem_controller.o(i._ZN8Mem_ctrl7get_maxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Mem_ctrl::get_max() &rArr; Mem_ctrl::get_max(unsigned char) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_max(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
</UL>

<P><STRONG><a name="[1bc]"></a>Mem_ctrl::read256(unsigned char, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mem_controller.o(i._ZN8Mem_ctrl7read256Ehj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Mem_ctrl::read256(unsigned char, unsigned) &rArr; Memory::read16(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read16(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_scan()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_scan(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[1c7]"></a>Mem_ctrl::get_date(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mem_controller.o(i._ZN8Mem_ctrl8get_dateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Mem_ctrl::get_date(unsigned char) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_date()
</UL>

<P><STRONG><a name="[158]"></a>Mem_ctrl::get_date()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mem_controller.o(i._ZN8Mem_ctrl8get_dateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Mem_ctrl::get_date() &rArr; Mem_ctrl::get_date(unsigned char) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::get_date(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
</UL>

<P><STRONG><a name="[173]"></a>Mem_ctrl::LOG_DEBUG(unsigned, unsigned, unsigned, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, mem_controller.o(i._ZN8Mem_ctrl9LOG_DEBUGEjjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Mem_ctrl::LOG_DEBUG(unsigned, unsigned, unsigned, unsigned) &rArr; Mem_ctrl::LOG_WRITE(stall_log_out) &rArr; Mem_ctrl::read(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_WRITE(stall_log_out)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
</UL>

<P><STRONG><a name="[1ba]"></a>Mem_ctrl::LOG_WRITE(stall_log_out)</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, mem_controller.o(i._ZN8Mem_ctrl9LOG_WRITEE13stall_log_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Mem_ctrl::LOG_WRITE(stall_log_out) &rArr; Mem_ctrl::read(unsigned char, unsigned) &rArr; Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_address
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write_enable()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_DEBUG(unsigned, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1c5]"></a>Mem_ctrl::read_once(unsigned char, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mem_controller.o(i._ZN8Mem_ctrl9read_onceEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Mem_ctrl::read_once(unsigned char, unsigned) &rArr; Memory::read(unsigned) &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::chip_select_pull(unsigned char, GPIO_PinState)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read_skip_problems(unsigned char, unsigned)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[1cb]"></a>Mem_ctrl::Mem_ctrl(Memory*, Memory*, Memory*, CS_reg*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mem_controller.o(i._ZN8Mem_ctrlC1EP6MemoryS1_S1_P6CS_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mem_ctrl::Mem_ctrl(Memory*, Memory*, Memory*, CS_reg*)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_debug
</UL>

<P><STRONG><a name="[227]"></a>Mem_ctrl::Mem_ctrl__sub_object(Memory*, Memory*, Memory*, CS_reg*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mem_controller.o(i._ZN8Mem_ctrlC1EP6MemoryS1_S1_P6CS_reg), UNUSED)

<P><STRONG><a name="[42]"></a>Mem_ctrl::~Mem_ctrl()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mem_controller.o(i._ZN8Mem_ctrlD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.__sti___8_main_cpp_debug)
</UL>
<P><STRONG><a name="[228]"></a>Mem_ctrl::~Mem_ctrl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mem_controller.o(i._ZN8Mem_ctrlD1Ev), UNUSED)

<P><STRONG><a name="[1d4]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>__cxa_guard_acquire</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_remaining_in_percent(unsigned, unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_piazo(bool)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::need_to_stall_dynamic()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::added_counter()
</UL>

<P><STRONG><a name="[74]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a0]"></a>cs3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.cs3))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cs3 &rArr; cs_generic &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_once
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[1d0]"></a>cs_generic</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.cs_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cs_generic &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pull_chipselet_line
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs3
</UL>

<P><STRONG><a name="[a1]"></a>delay</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(i.delay))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::set_value(unsigned char)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::motor_cmd_tight(bool)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::store_register()
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::read(select_channel)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(int, int)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep(int, int)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_WRITE(stall_log_out)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::read256(unsigned char, unsigned)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read16(unsigned)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::start_motor_pwm()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::write_out_pulses_on_stop_motor()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_write()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::check_timer_expired()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_once
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>delay_with_watchdog</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, common.o(i.delay_with_watchdog))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = delay_with_watchdog &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
</UL>

<P><STRONG><a name="[64]"></a>main</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = main &rArr; monitor::serial_consume() &rArr; monitor::parse_input_uart() &rArr; Main_Menu() &rArr; xmodem_receive() &rArr; xmodem_handle_packet(unsigned char) &rArr; FLASH_If_Write(unsigned, unsigned char*, unsigned) &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::check_connections()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_adc()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::parse_input_uart()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::read()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::stop_motor()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::qa_state()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_before_while()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_PF_struct(PF_memory*)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_state()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::update_debug()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::active_state()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::init_state()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_pulse_counter(unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::update_version()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::fast_beeps_3()
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutString(const char*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CRC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::read_interlock()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remapMemToSRAM()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1d1]"></a>pull_chipselet_line</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.pull_chipselet_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pull_chipselet_line
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs_generic
</UL>

<P><STRONG><a name="[1d5]"></a>read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, stm32f0xx_it.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_address
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_address_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_once
</UL>

<P><STRONG><a name="[1d6]"></a>read_reset_button</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.read_reset_button))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_reset_button
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_for_reset_press
</UL>

<P><STRONG><a name="[1d7]"></a>read_reset_button_aux</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, common.o(i.read_reset_button_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_reset_button_aux
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_for_reset_press_aux
</UL>

<P><STRONG><a name="[10a]"></a>test_for_reset_press</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f0xx_it.o(i.test_for_reset_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = test_for_reset_press &rArr; read_reset_button
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reset_button
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>test_for_reset_press_aux</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, common.o(i.test_for_reset_press_aux))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = test_for_reset_press_aux &rArr; read_reset_button_aux
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_reset_button_aux
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::serial_consume()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::idle_state()
</UL>

<P><STRONG><a name="[18f]"></a>translate_address_to_int</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common.o(i.translate_address_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[18e]"></a>translate_int_to_address</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, common.o(i.translate_int_to_address))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::LOG_WRITE(stall_log_out)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write(unsigned, unsigned)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::erase(unsigned)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read(unsigned)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[193]"></a>translate_int_to_arr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, common.o(i.translate_int_to_arr))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::read16(unsigned)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::write(unsigned, unsigned)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::rx_test_read()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[1d8]"></a>write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stm32f0xx_it.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = write &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_arr
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;translate_int_to_address
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_once
</UL>

<P><STRONG><a name="[1d9]"></a>write_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.write_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_disable &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_once
</UL>

<P><STRONG><a name="[1da]"></a>write_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.write_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = write_enable &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_once
</UL>

<P><STRONG><a name="[a2]"></a>write_once</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, stm32f0xx_it.o(i.write_once))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = write_once &rArr; read &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enable
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_disable
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cs3
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
</UL>

<P><STRONG><a name="[38]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[49]"></a>__sti___8_main_cpp_debug</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, main.o(i.__sti___8_main_cpp_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_debug &rArr; Memory::Memory(unsigned char) &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_ctrl::Mem_ctrl(Memory*, Memory*, Memory*, CS_reg*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor::monitor(main_controller*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory::Memory(unsigned char)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_reg::CS_reg()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;State::State()
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeripherialDevices::PeripherialDevices(CS_reg*, STATUS_reg*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_controller::main_controller(DebugHelper*, Mem_ctrl*, PeripherialDevices*, State*, Screen_ctrl*, adc_controller*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_controller::adc_controller(CS_reg*)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_ctrl::Screen_ctrl()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugHelper::DebugHelper()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STATUS_reg::STATUS_reg()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[117]"></a>xmodem_error_handler(unsigned char*, unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, xmodem.o(i._Z20xmodem_error_handlerPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xmodem_error_handler(unsigned char*, unsigned char) &rArr; Serial_PutByte(unsigned char) &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Serial_PutByte(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_receive()
</UL>

<P><STRONG><a name="[118]"></a>xmodem_handle_packet(unsigned char)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, xmodem.o(i._Z20xmodem_handle_packeth))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = xmodem_handle_packet(unsigned char) &rArr; FLASH_If_Write(unsigned, unsigned char*, unsigned) &rArr; Mem_ctrl::write(unsigned char, unsigned, unsigned) &rArr; Mem_ctrl::write_once(unsigned char, unsigned, unsigned) &rArr; Memory::print_status() &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_If_Write(unsigned, unsigned char*, unsigned)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_calc_crc(unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmodem_receive()
</UL>

<P><STRONG><a name="[3a]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f0xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[3c]"></a>ADC_DMAError</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[3b]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f0xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f0xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[9b]"></a>ADC_Enable</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[d0]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stm32f0xx_hal_spi.o(i.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[d2]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[109]"></a>SPI_WaitFifoStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.SPI_WaitFifoStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFifoStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[108]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32f0xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[d9]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e3]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f0xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[e5]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f0xx_hal_tim.o(i.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[e6]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[d7]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d8]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f0xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[3d]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f0xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f0xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[ec]"></a>UART_EndRxTransfer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f0xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f0xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_CalcBaseAndBitshift
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[b2]"></a>DMA_SetConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f0xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[be]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[39]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[92]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[86]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[6f]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[70]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
